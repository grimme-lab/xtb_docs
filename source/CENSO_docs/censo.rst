.. _CENSO:

=====================
Introduction to CENSO
=====================

.. contents::

Installation
------------

To install CENSO, simply clone the `github repository <https://github.com/grimme-lab/CENSO>`_. 
Then, you have two options:

1. install *via* ``pip``,
2. setup usage *via* ``$PATH``.

To install in your current environment using ``pip``, run:

.. code:: sh 

    pip install .

CENSO can then be run by configuring a custom runner script (see below) or by calling 
``python3 -m censo`` in the terminal.

Alternatively, after cloning the repository, you could also add the ``bin`` folder to your ``$PATH``.
In this directory, there is a helper script called ``censo``, calling the command line entry point of CENSO
as if you were calling it using ``python3 -m censo``.

Usage *via* runner script
=========================

In order to call CENSO using a custom runner script, you can use the following example as a template.

.. code:: python

    from censo.ensembledata import EnsembleData
    from censo.configuration import configure
    from censo.ensembleopt import Screening, Optimization
    from censo.properties import NMR

    workdir = "/absolute/path/to/your/workdir" # CENSO will put all files in this directory
    input_path = "rel/path/to/your/inputfile" # path relative to the working directory
    ensemble = EnsembleData(workdir)
    ensemble.read_input(input_path, charge=0, unpaired=0)

    # If the user wants to use a specific rcfile:
    configure("/abs/path/to/rcfile")

    # Setup all the parts that the user wants to run (don't need to be in a specific order)
    parts = [
        part(ensemble) for part in [Screening, Optimization, NMR]
    ]

    # Run all the parts and collect their runtimes
    part_timings = []
    for part in parts:
        part_timings.append(part.run())

    # If no Exceptions were raised, all the output can now be found in 'workdir'
    # Data is given in a formatted plain text format (*.out) and and json format
    # The files used in the computations for each conformer can be found in the folders 
    # generated by each part, respectively (e.g. 'prescreening/CONF2/...')

Requirements
------------

CENSO requires xTB in version 6.4.0 or above. In order to use ORCA, it should be installed in version
4.x or above. It is recommended to use CREST for initial ensemble generation, as well as for better 
interfacing with ANMR for ensemble NMR spectra calculation.

CENSO requires Python >= 3.8, there are no further dependencies.


General information
-------------------

.. figure:: ../../figures/CENSO/censo_logo_300dpi.png
	:scale: 40%
	:align: center
	:alt: CENSO logo

**C**\ommandline **E**\nergetic **SO**\rting (**CENSO**) is a sorting algorithm 
for efficient evaluation of **S**\tructure **E**\nsembles (**SE**). 

**WIP**

CENSO can be structured into two components:

1. Ensemble optimization,
2. Ensemble property calculations.

The first part (ensemble optimization) can use up to four steps:

1. Prescreening,
2. Screening,
3. (Geometry-)Optimization,
4. Refinement.

Ensemble properties available for calculation are:

1. NMR spectra,
2. Optical rotation (**TODO**),
3. UV/Vis spectra (**TODO**).

Ensemble Optimization
-------------------

Prescreening
=============

The first step after generating an ensemble of the most important conformers, e.g. using CREST, 
the number of which can range in the hundreds, is to improve on the preliminary
ranking using a lightweight DFT method. This should usually already yield significant
improvements compared to the preliminary ranking, usually obtained using SQM/FF methods.
In the case that solvation effects should be included, CENSO will use ``xtb`` to 
calculate the energy of solvation using the ALPB or GBSA solvation model. The threshold
for this step should be rather high (up to 10 kcal/mol).

Screening
=========

After prescreening the ensemble in the first step, this step is supposed to further 
improve on the ranking quality by increasing the quality of the utilized DFT method.
Also, in this step one may choose to include thermal contributions to the free enthalpy
by activating ``evaluate_rrho``, which will lead to CENSO using ``xtb`` to calculate
single-point Hessians. This will also include solvation if the user chose to do so.
The threshold for this step should be lower than before (up to 7.5 kcal/mol) to account
for the decreasing uncertainty due to improvements in the ranking method. CENSO will 
increase the threshold by up to 1 kcal/mol, proportional to the (exponential of the) 
standard deviation of the thermal contributions. The solvation contributions will be 
calculated using DFT, if required explicitly, though explicitly calculating the solvation 
contribution will double the computational effort due to two required single-point calculations.

Optimization
============

To further improve the ranking, the geometries of the conformers in this step will be 
optimized using DFT gradients. For this, the ``xtb`` optimizer will be used as driver.
Solvation effects will be included implicitly. Furthermore, thermal contributions will
be included for the ranking if ``evaluate_rrho`` is set to ``True``. One can also utilize
a macrocycle optimizer in CENSO (set ``macrocycle`` to ``True``). This will run a number
(``optcycles``) of geometry optimization steps (microcycles) for every macrocycle and 
update the ensemble every macrocycle. The single-point Hessian evaluation using ``xtb`` 
will take place once after at least 6 microcycles and once after finishing the last
macrocycle. The energy threshold for this step is based on a minimum threshold (``threshold``) 
and TODO
This threshold will be applied once the gradient norm of a conformer is below a
specified threshold (``gradthr``) for all the microcycles in the current macrocycle.

It is also possible to use ``xtb``-constraints for this step. The constraints should be 
provided as a file called ``constraints.xtb`` in the working directory. Also, the 
``constrain`` option for the optimization part should be set to ``True``.

Refinement
==========

After geometry optimization of the ensemble, a high-level DFT calculation should be performed,
to obtain highly accurate single-point energies. In this step, the threshold is also 
more rigorous, using a Boltzmann population cutoff. The sorted (from highest to lowest)
populations (in %) of the conformers after calculating the high-level single-point are 
summed up until reaching the defined threshold, removing all further conformers from
consideration.

Ensemble Properties 
-------------------

NMR Spectra
===========

For the calculation of the NMR spectrum of an ensemble, single-points to compute the 
nuclear shieldings and couplings will be executed. The computational parameters for shieldings
and couplings can be set to different values. In this case two separate single-points 
will be run. If the settings are identical, only one single-point will be run for both.
After that, CENSO will generate files for the simulation of the NMR spectrum using ANMR.
Please note that the user needs to setup the ``.anmrrc`` file.

For more detailed instructions see :ref:`nmr`.

Optical Rotation
================

**WIP**

UV/Vis Spectra
==============

**WIP**
